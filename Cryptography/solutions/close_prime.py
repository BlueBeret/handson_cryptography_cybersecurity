n = 268981009990403933953908212652193621961498987089311924292338905227007664560691364244237027917182833657656286325759659509000447449052962688219835762435331226362950678929761842316798698885327658831024250053544293571732261946513589794652544899000565841281373125343274050858906071687614440172256833588658683834915529881807660340074173397275940727468219645509914801175027028806549502577417831120339007890477484885721129890609961929453544322194000252827923665702498314748422636846069745048962839307634405291018675536396742371697456557171633292582774586997987420015452966555810242437481046184911304817965159070935171933364054069426715816483534825907387576028841795560611994370754859334521119128781055726066384412097304964683123604256909301948553928542387704413638361843375814670841537407662381430090871236081063345916980078073506982685003890185637787177813220746030453177431456407969695178853196244931850683808513791409133458426924180043301177022011564900562124249391414984759033970474041809685865656229257294704700865855723643561382763305814389970568003979704417656105830311127690327386632096225358443760151562768661559121655713654388745320442377266283842813068535723888238412940114751426073323487690476273305441817559528706261784779957441
e = 65537
c = 190148347596324332686833376183321400294970008554085833464997222260064462549457136012418347744813439894894279785897151047549949939503677751997480490371529782073429661736030914419854869121180628294399998860362987100376619981675157055125321367537138783024170943203339831723137799450843240779430606994125754530007425916504289365116087693749418661870858572143249318741021760019905105958718766604128978591667263386136409481765786339022480506095915254339312355952350024554257549844271936450857776503830844595480237336116576968998084778310651399928481178652631003646832074067199780616635473698213622814008485744450422402711872624221808420235392697572292812906782423098157737820722895244916581929210007496266359086827867899399468255700690654841098386001775624246938307943860009101274655129762987252714977547477799400647075798898677537372942822837911395391054490155681598066257371128970036063169153682920427397540056295677125355138140024647107341013693934154126870437530248304059062710520551875426617441027771270146023709910640730521400247853932681457767706099746936688372802821489105659505468117129335478540778142225751651079523513855769490046656763593482949157710717663388804407390899725402936386540864396636638932215587750314610178372274048

from sympy.ntheory.primetest import is_square
from Crypto.Util.number import long_to_bytes,inverse
import sympy

def fermat(n):
    a = int(sympy.sqrt(n)) # Fermat's Algorithm
    b = (a*a) - n
    while not is_square(b):
        a += 1
        b = (a*a) - n
    else:
        p = int(a - (sympy.sqrt(b)))
        q = n//p
        if p * q == n:
            return p,q
        else:
            return "No Luck"
        
p,q = fermat(n)

phi = (p-1)*(q-1)
d = inverse(e,phi)
m = pow(c,d,n)
print(long_to_bytes(m).decode('ascii'))